from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from telebot.apihelper import ApiTelegramException
from time import sleep
from classes import Status, User, Order
import keyboards as kb
import variable as v
import functions as func

bot = TeleBot(v.TOKEN, parse_mode="Markdown")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

@bot.message_handler(commands=['start'])
def start(message: Message):
    chat_id = message.chat.id

    user = func.find_person(person_id=chat_id)

    if user:

        if user.status == Status.dispatcher:
            text = f"""
–ü—Ä–∏–≤–µ—Ç, *{user.name}*üñê
–í–∞—à —Å—Ç–∞—Ç—É—Å: *{user.status}*üëç

*–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤üìÑ
- –∑–∞—á–∏—Å–ª—è—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏üíµ
- –≤–∏–¥–µ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µüëÅ
            """

            # bot.send_message(message.chat.id, text)
            bot.send_photo(
                chat_id=chat_id,
                photo=v.open_logo(file_name="admin.jpeg"),
                caption=text
            )
            menu(message)

        elif user.status == Status.courier:
            text = f"""
–ü—Ä–∏–≤–µ—Ç, *{user.name}*üñê
–í–∞—à —Å—Ç–∞—Ç—É—Å: *{user.status}*üëç

*–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
- –≤—ã–±–æ—Ä –∑–∞–∫–∞–∑–æ–≤üìÑ
- –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞üíµ
            """

            # bot.send_message(message.chat.id, text)
            bot.send_photo(
                chat_id=chat_id,
                photo=v.open_logo(file_name="load_man.jpg"),
                caption=text
            )

            menu(message)

        elif user.status == Status.application:
            text = f"""
–ü—Ä–∏–≤–µ—Ç, *{user.name}*üñê
–í–∞—à —Å—Ç–∞—Ç—É—Å: *{user.status}*üëç

–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è —Å –≤–∞–º–∏‚è≥
            """

            bot.delete_message(chat_id, message.id)
            bot.send_message(message.chat.id, text, reply_markup=kb.application_start)

        else:
            text = f"""
üö´üö´üö´*–û–®–ò–ë–ö–ê*üö´üö´üö´
–í—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–∞—à —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω!ü´†
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!ü§µ
            """
            bot.delete_message(chat_id, message.id)
            bot.send_message(message.chat.id, text)

    else:
        text = f"""
–ü—Ä–∏–≤–µ—Ç, *{message.chat.first_name}*üñê

–Ø –±–æ—Ç –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ *"–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ –ú–∏—Ö–∞–ª—ã—á"*, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã–π —Ü–µ–ª–µ–πüöô
–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!‚ùå

–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—Éüòâ
        """
        bot.delete_message(chat_id, message.id)
        bot.send_message(message.chat.id, text, reply_markup=kb.incognito_start)


@bot.message_handler(commands=['menu'])
def menu(message: Message):
    chat_id = message.chat.id

    user = func.find_person(person_id=chat_id)

    if user.status == Status.dispatcher:
        keyboard = kb.dispatcher_start
    elif user.status == Status.courier:
        keyboard = kb.courier_start

    bot.delete_message(chat_id, message.id)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—éüõ†", reply_markup=keyboard)


@bot.callback_query_handler(func=lambda callback: callback.data in ["apply", "no_start"])
def starting(callback: CallbackQuery, msg: Message = None):
    chat_id = callback.message.chat.id
    message_edit = callback.message
    
    if callback.data == "apply":
        text = f"""
–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à–∏ –Ω–∞—Å—Ç–æ—è—â–∏–µ –§–ò–û
–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: *–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á* 
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id
        )
        bot.register_next_step_handler(callback.message, get_full_name, message_edit)

    elif callback.data == "no_start":
        text = f"""
–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ, *{callback.message.chat.first_name}*üñê
–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –µ—â—ë!
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id
        )

def get_full_name(message: Message, message_edit: Message):
    chat_id = message.chat.id
    fio = message.text.split()

    bot.delete_message(chat_id, message.id)

    text = f"""
–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì±
"""
    
    bot.delete_message(chat_id, message_edit.id)
    message_edit = bot.send_message(chat_id, text, reply_markup=kb.get_phone)

    bot.register_next_step_handler(message, get_phone_number, message_edit, fio)

def get_phone_number(message: Message, message_edit: Message, fio: list):
    chat_id = message.chat.id

    try:
        phone_number = message.contact.phone_number
    except AttributeError:
        bot.delete_message(chat_id, message.id)
        bot.delete_message(chat_id, message_edit.id)
        bot.send_message(chat_id, text="–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üßê")
        return

    func.add_application(
        data_user={
            "id": chat_id,
            "name": " ".join(fio),
            "surname": "?",
            "patronymic": "?",
            "phone_number": phone_number
        }
    )

    text = f"""
‚ö†Ô∏è–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *"{" ".join(fio)}"*! –°–∫–æ—Ä–µ–µ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!‚ö†Ô∏è
"""

    # delete_list = []
    for person in func.get_full_info_personal():
        if person[4] == Status.dispatcher:
            try:
                msg_delete = bot.send_message(
                    chat_id=person[0],
                    text=f'‚ö†Ô∏è–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{" ".join(fio)}*! –°–∫–æ—Ä–µ–µ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!‚ö†Ô∏è'
                )
                bot.edit_message_reply_markup(
                    chat_id=person[0], 
                    message_id=msg_delete.id, 
                    reply_markup=kb.delete_messege_kb(msg_delete.id)
                )
            except ApiTelegramException:
                pass
            # else:
            #     delete_list.append(msg_delete)

    text = f"""
–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!‚úÖ
–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*üõ†
"""
    bot.delete_message(chat_id, message.id)
    bot.delete_message(chat_id, message_edit.id)
    bot.send_message(chat_id, text)

    # sleep(60)
    # for msg in delete_list:
    #     bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)


@bot.callback_query_handler(
        func=lambda callback: callback.data in [
            "virtual_counts", 
            "work_with_orders", 
            "documentation", 
            "back_main"
        ]
    )
def courier(callback: CallbackQuery, msg: Message = None):
    chat_id = callback.message.chat.id
    message_edit = callback.message
    
    if callback.data == "virtual_counts":
        text = f"""
–í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: *{func.find_person(person_id=chat_id).virtual_counts} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Ä—É–±–ª–µ–π*üíµ

–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞ –∑–∞—á–∏—Å–ª–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:

üìå –ü–æ–ª—É—á–∞—Ç–µ–ª—å - *–ü—Ä–æ–∑–æ—Ä–æ–≤ –ò–≤–∞–Ω –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á*
üìå –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ - *–°–±–µ—Ä–±–∞–Ω–∫ –ú–ò–†*
üìå –ù–æ–º–µ—Ä –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã - *2202 2053 2798 3521*
üìå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *+79535012152*
üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - *–Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û*

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–∞—á–∏—Å–ª–∏—Ç –≤–∞–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ä—É–±–ª–∏!

‚ö†Ô∏è*–í–ù–ò–ú–ê–ù–ò–ï*‚ö†Ô∏è
–ü—Ä–∏ –Ω–µ –≤–≤–æ–¥–µ —Å–≤–æ–µ–≥–æ –§–ò–û –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–µ –±—É–¥—É—Ç!
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )

    elif callback.data == "work_with_orders":
        text = f"""
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüö´
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )

    elif callback.data == "documentation":
        text = f"""
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüö´
"""
        bot.edit_message_text(
            text=v.instruction,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )

    elif callback.data == "back_main":
        menu(callback.message)


@bot.callback_query_handler(
        func=lambda callback: callback.data in [
            "work_with_orders_admin", 
            "virtual_counts_admin", 
            "personal_data", 
            "look_cash", 
            "replenish_cash",
        ]
    )
def admin(callback: CallbackQuery, msg: Message = None):
    chat_id = callback.message.chat.id
    
    if callback.data == "work_with_orders_admin":
        text = f"""
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏üõ†
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.work_orders_admin
        )

    elif callback.data == "virtual_counts_admin":
        text = f"""
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—åüõ†
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.virtual_cash_admin_select
        )

    elif callback.data == "personal_data":
        text = f"""
–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –¥–∞–Ω–Ω—ã–º–∏?üìë
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.personal_data_select_kb
        )

    elif callback.data == "look_cash":
        text = f"""
–í—ã–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —É –∫–æ–≥–æ –∫–∞–∫–æ–π –±–∞–ª–∞–Ω—Åüö´
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )

    elif callback.data == "replenish_cash":
        text = f"""
–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç?üßê
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
        )

        bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=callback.message.id,
            reply_markup=kb.create_kb_cash()
        )


@bot.callback_query_handler(func=lambda callback: "cash_select" in callback.data)
def select_user_cash(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.data.split(sep="&")[1]
    user = func.find_person(person_id=user_id)
    text = f"""
–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–∏–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "*{user.surname} {user.name} {user.patronymic}*"?üßê
–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Çüí∞
"""
    bot.delete_message(chat_id, callback.message.id)
    msg = bot.send_message(chat_id, text, reply_markup=kb.create_money_kb(depth=39))

    bot.register_next_step_handler(callback.message, enrollment, user_id, user, msg)


def enrollment(message: Message, user_id: int, user, msg: Message):
    chat_id = message.chat.id
    price = message.text[:-1]
    text = f"""
–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–ª–∏—Ç—å "*{message.text}*" –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "*{user.surname} {user.name} {user.patronymic}*"?üßê
"""

    bot.delete_message(chat_id, message_id=message.id)
    bot.delete_message(chat_id, message_id=msg.id)

    msg = bot.send_message(chat_id, text, reply_markup=kb.yes_no_reply_kb)
    bot.register_next_step_handler(message, enrollment_final, price, user, msg)


def enrollment_final(message: Message, price: int, user, msg: Message):
    chat_id = message.chat.id

    if message.text == "–î–∞‚úÖ":
        text = f"""
–°—É–º–º–∞ –≤ "*{price}*üíµ" –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "*{user.surname} {user.name} {user.patronymic}*"‚òëÔ∏è
"""        
        func.enrollment_cash(person_id=user.user_id, price=price, operator="+")

        msg_delete = bot.send_message(
            chat_id=user.user_id,
            text=f"‚ö†Ô∏è*–í–ù–ò–ú–ê–ù–ò–ï*‚ö†Ô∏è\n–ù–∞ –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ *{price}*üíµü§©"    
            )
        bot.edit_message_reply_markup(
            chat_id=user.user_id, 
            message_id=msg_delete.id, 
            reply_markup=kb.delete_messege_kb(msg_delete.id)
        ) 
        
    elif message.text == "–ù–µ—Ç‚ùå":
        text = f"""
–°—É–º–º–∞ –≤ "*{price}*üíµ" –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "*{user.surname} {user.name} {user.patronymic}*"‚ùå
"""
    else:
        text = f"""
–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Öüö´
""" 
    bot.delete_message(chat_id, message_id=message.id)
    bot.delete_message(chat_id, message_id=msg.id)
    bot.send_message(chat_id, text, reply_markup=kb.back_kb)


@bot.callback_query_handler(
    func=lambda callback: callback.data in [
        "statistics", 
        "loading", 
        "download",
        "download_persons_data", 
        "dowload_orders",
        "loading_orders", 
        "loading_persons_data",
        "update_status",
    ]
)
def load_dowl_data(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    
    if callback.data == "statistics":

        text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞üìà

‚ö´Ô∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: 0
‚ö™Ô∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(list(filter(lambda x: x[4] == Status.application, func.get_full_info_personal())))}
üî¥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑—á–∏–∫–æ–≤: {len(list(filter(lambda x: x[4] == Status.courier, func.get_full_info_personal())))}
üü°–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(list(filter(lambda x: x[4] == Status.dispatcher, func.get_full_info_personal())))}
üü†–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤: {len(list(filter(lambda x: x[4] == Status.director, func.get_full_info_personal())))}

‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–∫–∞—á–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.update_status
        )

    elif callback.data == "update_status":
        text = f"""
–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å?üñ®
"""
        bot.answer_callback_query(
            callback_query_id=callback.id,
            text="–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüõ†",
            show_alert=True
        )

    elif callback.data == "loading":
        text = f"""
–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å?üñ®
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.personal_data_loading_kb
        )

    elif callback.data == "download":
        text = f"""
–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å?üñ®
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.personal_data_dowload_kb
        )

    elif callback.data == "download_persons_data":
        text = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *xlsx-—Ñ–∞–π–ª–∞*üìÑ

‚ö†Ô∏è*–í–ù–ò–ú–ê–ù–ò–ï*‚ö†Ô∏è
–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å *xlsx-—Ñ–∞–π–ª–µ* –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!
"""
        bot.delete_message(chat_id, callback.message.id)

        bot.send_document(
            chat_id=chat_id,
            document=func.created_xlsx_persons_data(),
            caption=text,
            reply_markup=kb.back_kb,
            visible_file_name="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.xlsx",
        )
        
    elif callback.data == "dowload_orders":
        text = f"""
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüö´
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )

    elif callback.data == "loading_orders":
        text = f"""
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüö´
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )    

    elif callback.data == "loading_persons_data":
        text = f"""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *xlsx-—Ñ–∞–π–ª* —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!

‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è
–ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
–ü—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å *xlsx-—Ñ–∞–π–ª–µ* –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!
"""
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id
        )

        bot.register_next_step_handler(callback.message, dowload_xlsx_file, callback.message)


def dowload_xlsx_file(message: Message, msg: Message):
    chat_id = message.chat.id

    bot.delete_message(chat_id, message.id)
    bot.delete_message(chat_id, msg.id)

    if message.document == None:
        bot.send_message(chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–π–ª!‚ùå", reply_markup=kb.back_kb)

    else:

        file_path = bot.get_file(message.document.file_id).file_path
        dowload_file = bot.download_file(file_path)

        func.dowload_info_xlsx(dowload_file)

        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!‚òëÔ∏è", reply_markup=kb.back_kb)


@bot.callback_query_handler(
    func=lambda callback: callback.data in 
    [
        "creating_orders",
        "show_orders",
        "update_orders",
    ] or "order_end" in callback.data or "delete_orders" in callback.data
)
def works_orders(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    if callback.data == "update_orders":
        pass

    elif callback.data == "creating_orders":
        text = """
1Ô∏è‚É£ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ Telegram*üîµ
–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞–∫–∞–∑—É.üìÑ
–ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –≤–≤–æ–¥–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ‚ùóÔ∏è
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É —Å—Ç—Ä–æ–≥–æ –ø–æ –ø–æ—Ä—è–¥–∫—É:

üìå –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
üìå –î–∞—Ç–∞/–≤—Ä–µ–º—è
üìå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
üìå –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞
üìå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞
üìå –ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏
üìå –ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏
üìå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö
üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
üìå –û–ø–ª–∞—Ç–∞ (–≤ —Ä—É–±.)
üìå –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤–∏—Ä—Ç. —Ä—É–±.)


2Ô∏è‚É£ *–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Excel*‚ö™Ô∏è
–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –≤—ã—à–µ, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—Ä–∞–∑–µ—Ü.üìë 
–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ.‚úèÔ∏è


‚ö†Ô∏è*–í–ù–ò–ú–ê–ù–ò–ï*‚ö†Ô∏è
–ü—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏–ª–∏ –≤–æ–≤—Å–µ –∑–∞–∫–∞–∑ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω!üò°
"""

        bot.delete_message(chat_id, callback.message.id)

        msg2 = bot.send_document(
            chat_id=chat_id,
            document=func.create_order_fields(),
            visible_file_name="–ü—É–Ω–∫—Ç—ã –∑–∞–∫–∞–∑–∞.xlsx"
        )
        msg = bot.send_message(chat_id, text)

        bot.register_next_step_handler(callback.message, get_data_order, msg, msg2)

    elif callback.data == "show_orders":

        list_id = (0, 0)
        list_order_person = func.get_order_personal_info()
        for order_id, user_id in list_order_person:
            if chat_id == user_id:
                list_id = (order_id, user_id)

        if chat_id == list_id[1]:

            order = func.find_info_order(order_id=list_id[0])

            if order.active_loader_man == order.max_count_loader_man or order.status == "–ü—Ä–∏–Ω—è—Ç":
                client_fio = order.fio_client
                number_client = order.number_tel_client
                text_end = "–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–∫–∞–∑—ã - –∑–∞–≤–µ—Ä—à–∏—Ç–µ —ç—Ç–æ—Ç!"
                local_keyboard = kb.order_end(order_id=order.order_id)
            else:
                client_fio = "???? ???? ????"
                number_client = "?(???)???-??-??"
                text_end = f"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –µ—â—ë *{int(order.max_count_loader_man)-int(order.active_loader_man)}* –≥—Ä—É–∑—á–∏–∫–∞(–æ–≤)!"
                local_keyboard = kb.order_end(order_id=order.order_id)

            text = f"""
*–£ –í–ê–° –ï–°–¢–¨ –ê–ö–¢–ò–í–ù–´–ô –ó–ê–ö–ê–ó!*

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ *"{order.title}"*   *{order.active_loader_man}*/*{order.max_count_loader_man}*üë§

üìå –î–∞—Ç–∞/–≤—Ä–µ–º—è - *{order.datetime}*
üìå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ - *{order.contets}*
üìå –ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏ - *{order.address_loading}*
üìå –ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏ - *{order.address_unloading}*
üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - *{order.comments}*
üìå –û–ø–ª–∞—Ç–∞ (—Ä—É–±.) - *{order.price}*
üìå –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤–∏—Ä—Ç. —Ä—É–±.) - *{order.virtual_price}*

üìå –ö–ª–∏–µ–Ω—Ç - *{client_fio}*
üìå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - *{number_client}*
"""
            text_load_man_title = "\n*–ì—Ä—É–∑—á–∏–∫–∏üë•:*\n"
            text_middle = "\n‚ö†Ô∏è*–í–ù–ò–ú–ê–ù–ò–ï*‚ö†Ô∏è\n"

            lass_count = 0
            text_load_man = ""
            for order_id_, user_id_ in list_order_person:
                if order_id_ == order.order_id:
                    lass_count += 1
                    user_ = func.find_person(person_id=user_id_)
                    text_load_man += f" - {user_.surname} {user_.name} {user_.patronymic}üë§ —Ç–µ–ª. *+{user_.phone_number}*üì±"
                    text_load_man += "\n "

            empty_list_load_man = ""
            for _ in range(order.max_count_loader_man - lass_count):
                empty_list_load_man += f" - <–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ> üë§ —Ç–µ–ª. *?(???)???-??-??*üì±"
                empty_list_load_man += "\n "

            bot.edit_message_text(
                text=f"{text} {text_load_man_title} {text_load_man}{empty_list_load_man} {text_middle} {text_end}",
                chat_id=chat_id,
                message_id= callback.message.id,
                reply_markup=local_keyboard
            )

        else:
            
            user = func.find_person(person_id=chat_id)

            if user.status == Status.courier:
                keyboard_2, len_order = kb.create_order_kb_load_man()
            elif user.status == Status.dispatcher:
                keyboard_2, len_order = kb.create_order_kb_admin()

            if len_order == 0:
                text = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Çüò¢"
            else:
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ –∫–∞–∫–æ–º –∑–∞–∫–∞–∑–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—éüîç"

            try:
                bot.edit_message_text(
                    text=text,
                    chat_id=chat_id,
                    message_id= callback.message.id,
                    reply_markup=keyboard_2
                )
            except ApiTelegramException:
                bot.answer_callback_query(
                    callback_query_id=callback.id,
                    text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ‚ùå",
                    show_alert=True
                )

    elif "delete_orders" in callback.data:
        order = func.find_info_order(order_id=callback.data.split()[1])

        text = f"""
–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ *"{order.title}"*
"""

        bot.delete_message(chat_id=chat_id, message_id=callback.message.id)
        msg = bot.send_message(chat_id=chat_id, text=text, reply_markup=kb.yes_no_reply_kb)
        bot.register_next_step_handler(callback.message, delete_order_admin, msg, order)
        
    elif "order_end" in callback.data:

        func.delete_active_orders(user_id=chat_id, order_id=callback.data.split()[1])

        text = f"""
*–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑*‚úÖ

–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–∑–∞–±—ã–≤–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Åüí∞
"""
        
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id= callback.message.id,
            reply_markup=kb.back_kb
        )


def get_data_order(message: Message, msg: Message, msg2: Message):
    chat_id = message.chat.id

    bot.delete_message(chat_id, message.id)
    bot.delete_message(chat_id, msg2.id)
    bot.delete_message(chat_id, msg.id)

    if message.document != None:

        if message.document.file_name[-4:] == "xlsx":
            file_path = bot.get_file(message.document.file_id).file_path
            dowload_file = bot.download_file(file_path)
            list_order = func.reader_order_fields(dowload_file)
            len_order_data = len(list_order)

        else:
            msg_answer = bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞!üö´", reply_markup=kb.back_kb)
            return

    else:
        list_order = message.text.split(sep="\n")
        len_order_data = len(list_order)

    if len_order_data > len(v.order_data_fields):
        msg_answer = bot.send_message(chat_id, "–í–≤–µ–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!üö´", reply_markup=kb.back_kb)

    elif len_order_data < len(v.order_data_fields):
        msg_answer = bot.send_message(chat_id, "–í–≤–µ–¥–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!üö´", reply_markup=kb.back_kb)

    else:
        
        list_order = dict(zip(v.order_data_fields, list_order))

        text_start = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?üßê\n\n"
        text_end = "\n‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
        
        info = ""
        for a, b in list_order.items():
            info += f"üìå {' - '.join([f'{a}', f'*{b}*'])}\n"

        msg_answer = bot.send_message(chat_id, text_start+info+text_end, reply_markup=kb.yes_no_reply_kb)

        bot.register_next_step_handler(message, get_answer_order, msg_answer, list_order)


def get_answer_order(message: Message, msg_answer: Message, list_order: dict):
    chat_id = message.chat.id
    text_msg = message.text

    bot.delete_message(chat_id, message.id)
    bot.delete_message(chat_id, msg_answer.id)

    if (text_msg == "–î–∞‚úÖ" and 
        list_order["–û–ø–ª–∞—Ç–∞ (–≤ —Ä—É–±.)"].isdigit() and 
        list_order["–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤–∏—Ä—Ç. —Ä—É–±.)"].isdigit() and 
        list_order["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö (—à—Ç.)"].isdigit()):

        func.send_info_orders(data=list_order)
        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω‚òëÔ∏è", reply_markup=kb.back_kb)

        text = f"""
‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑: *"{list_order["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"]}"*‚ö†Ô∏è
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–∑—á–∏–∫–æ–≤: *{list_order['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö (—à—Ç.)']} —à—Ç.*
–°–º–æ—Ç—Ä–∏ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–∫–∞ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏üòÖ
"""     
        
        # delete_list = []
        for person in func.get_full_info_personal():
            if person[4] == Status.courier:
                try:
                    msg_delete = bot.send_message(
                        chat_id=person[0],
                        text=text,
                    )
                    bot.edit_message_reply_markup(
                        chat_id=person[0], 
                        message_id=msg_delete.id, 
                        reply_markup=kb.delete_messege_kb(msg_delete.id)
                )
                except ApiTelegramException:
                    pass
                # else:
                #     delete_list.append(msg_delete)

        # sleep(60)
        # for msg in delete_list:
        #     bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)

    elif text_msg == "–ù–µ—Ç‚ùå":
        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω‚ùå", reply_markup=kb.back_kb)

    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Öüö´", reply_markup=kb.back_kb)


@bot.callback_query_handler(
        func=lambda callback: "order_id" in callback.data
)
def orders_handler(callback: CallbackQuery):
    chat_id = callback.message.chat.id


    if callback.data == "accept_order":
        bot.answer_callback_query(callback.id, text="–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")

    else:

        order_id = callback.data[len(callback.data.split()[0])+1:]
        order = func.find_info_order(order_id=order_id)
        user = func.find_person(person_id=chat_id)

        text = f"""
*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ "{order.title}"*   *{order.active_loader_man}*/*{order.max_count_loader_man}*üë§

üìå –î–∞—Ç–∞/–≤—Ä–µ–º—è - *{order.datetime}*
üìå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ - *{order.contets}*
üìå –ê–¥—Ä–µ—Å –ø–æ–≥—Ä—É–∑–∫–∏ - *{order.address_loading}*
üìå –ê–¥—Ä–µ—Å –≤—ã–≥—Ä—É–∑–∫–∏ - *{order.address_unloading}*
üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - *{order.comments}*
üìå –û–ø–ª–∞—Ç–∞ (—Ä—É–±.) - *{order.price}*
üìå –°—Ç–æ–∏–º–æ—Å—Ç—å (–≤–∏—Ä—Ç. —Ä—É–±.) - *{order.virtual_price}*
    """
        
        text_end = """
‚ö†Ô∏è*–í–ù–ò–ú–ê–ù–ò–ï*‚ö†Ô∏è
–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º!
–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è!
"""

        text_load_man_title = "\n*–ì—Ä—É–∑—á–∏–∫–∏üë•:*\n"

        lass_count = 0
        text_load_man = ""
        for order_id_, user_id_ in func.get_order_personal_info():
            if order_id_ == order.order_id:
                lass_count += 1
                user_ = func.find_person(person_id=user_id_)
                text_load_man += f" - {user_.surname} {user_.name} {user_.patronymic}üë§ —Ç–µ–ª. *+{user_.phone_number}*üì±"
                text_load_man += "\n "

        empty_list_load_man = ""
        for _ in range(order.max_count_loader_man - lass_count):
            empty_list_load_man += f" - <–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ> üë§ —Ç–µ–ª. *?(???)???-??-??*üì±"
            empty_list_load_man += "\n "

        if user.status == Status.dispatcher:
            local_keyboard = kb.order_yes_no_admin_kb(order_id=order_id)
            bot.edit_message_text(
                text=f"{text} {text_load_man_title} {text_load_man}{empty_list_load_man} {text_end}",
                chat_id=chat_id,
                message_id=callback.message.id,
                reply_markup=local_keyboard
            )

        else:
            local_keyboard = kb.order_yes_no_kb(order_id=order_id)
            bot.edit_message_text(
                text=f"{text} {text_end}",
                chat_id=chat_id,
                message_id=callback.message.id,
                reply_markup=local_keyboard
            )


@bot.callback_query_handler(func=lambda callback: "accept_order" in callback.data)
def accept_orders(callback: CallbackQuery):
    chat_id = callback.message.chat.id

    order_id = callback.data[len(callback.data.split()[0])+1:]

    order = func.find_info_order(order_id=order_id)
    user = func.find_person(person_id=chat_id)

    if order.virtual_price > user.virtual_counts:
        text = f"""
‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è
–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ "*{order.title}*"üòí
–í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: *{user.virtual_counts}*üíµ

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ãüòÅ
"""
            
        bot.edit_message_text(
            text=text,
            chat_id=chat_id,
            message_id=callback.message.id,
            reply_markup=kb.order_no_money
        )

    else:
        
        active_load_man, load_man = func.active_load_man(order_id=order.order_id)

        if active_load_man == load_man:
            text = f"""
–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ "*{order.title}*"üò¢
–í–∏–¥–∏–º–æ —ç—Ç–æ —Å–¥–µ–ª–∞–ª –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–πüßê
–í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Ç –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º: *{user.virtual_counts}*üíµ
    """

            bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=callback.message.id,
                reply_markup=kb.order_no_money
            )

        else:
            func.enrollment_cash(person_id=chat_id, price=order.virtual_price, operator="-")
            func.add_order_persons(order_id=order_id, user_id=chat_id)
            user = func.find_person(person_id=chat_id)

            text = f"""
–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑ "*{order.title}*"!
–° –≤–∞—à–µ–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ *{order.virtual_price}*üíµ
–í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: *{user.virtual_counts}*üíµ

‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è
–ü—Ä–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –í–∞—Å –±—É–¥—É—Ç –Ω–∞–ª–æ–∂–µ–Ω—ã —Å–∞–Ω–∫—Ü–∏–∏‚ùóÔ∏è
    """

            bot.edit_message_text(
                text=text,
                chat_id=chat_id,
                message_id=callback.message.id,
                reply_markup=kb.order_no_money
            )

            # delete_list = []
            for person in func.get_full_info_personal():
                if person[4] == Status.dispatcher:
                    try:
                        msg_delete = bot.send_message(
                            chat_id=person[0],
                            text=f'‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è\n–ì—Ä—É–∑—á–∏–∫ "*{user.surname} {user.name} {user.patronymic}*" –≤–∑—è–ª –∑–∞–∫–∞–∑ *"{order.title}"*üòÖ\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *+{user.phone_number}*üì±'
                        )
                        bot.edit_message_reply_markup(
                            chat_id=person[0], 
                            message_id=msg_delete.id, 
                            reply_markup=kb.delete_messege_kb(msg_delete.id)
                        )
                    except ApiTelegramException:
                        pass
                    # else:
                    #     delete_list.append(msg_delete)

            active_load_man, load_man = func.active_load_man(order_id=order.order_id)
            if active_load_man == load_man:
                for order_id_, user_id_ in func.client.get_order_personal_info():
                    if int(order_id_) == int(order_id):
                        try:
                            msg_delete = bot.send_message(
                                chat_id=user_id_,
                                text=f'‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è\n–ó–∞–∫–∞–∑ "*{order.title}*" –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω –≥—Ä—É–∑—á–∏–∫–∞–º–∏üëç'
                            )
                            bot.edit_message_reply_markup(
                                chat_id=user_id_, 
                                message_id=msg_delete.id, 
                                reply_markup=kb.delete_messege_kb(msg_delete.id)
                            )
                        except ApiTelegramException:
                            pass

                for person in func.get_full_info_personal():
                    if person[4] == Status.dispatcher:
                        try:
                            msg_delete = bot.send_message(
                                chat_id=person[0],
                                text=f'‚ö†Ô∏è–í–ù–ò–ú–ê–ù–ò–ï‚ö†Ô∏è\n–ó–∞–∫–∞–∑ "*{order.title}*" –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω –≥—Ä—É–∑—á–∏–∫–∞–º–∏üëç'
                            )
                            bot.edit_message_reply_markup(
                                chat_id=person[0], 
                                message_id=msg_delete.id, 
                                reply_markup=kb.delete_messege_kb(msg_delete.id)
                            )
                        except ApiTelegramException:
                            pass
                        # else:
                        #     delete_list.append(msg_delete)

            # sleep(60)
            # for msg in delete_list:
            #     bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
            

def delete_order_admin(message: Message, msg: Message, order: Order):
    chat_id = message.chat.id
    text_msg = message.text

    bot.delete_message(chat_id, message.id)
    bot.delete_message(chat_id, msg.id)

    if text_msg == "–î–∞‚úÖ":
        func.delete_order_admin(order_id=order.order_id)
        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω‚úÖ", reply_markup=kb.back_kb)
      
    elif text_msg == "–ù–µ—Ç‚ùå":
        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –Ω–µ —É–¥–∞–ª—ë–Ω‚ùå", reply_markup=kb.back_kb)

    else:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Öüö´", reply_markup=kb.back_kb)


@bot.callback_query_handler(
        func=lambda callback: callback.data in ["delete_user"] or
        "delete_user_find" in callback.data
)
def delete_user(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    
    if callback.data == "delete_user":
        bot.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?üßê",
            chat_id=chat_id,
            message_id=callback.message.id,
            reply_markup=kb.create_kb_delete_user()
        )

    else:
        user_id = callback.data.split()[1]
        user = func.find_person(person_id=user_id)
        func.client.delete_user(user_id=user_id)

        bot.edit_message_text(
            text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "*{user.surname} {user.name} {user.patronymic}*" —É–¥–∞–ª—ë–Ω‚ò†Ô∏è',
            chat_id=chat_id,
            message_id=callback.message.id,
            reply_markup=kb.back_kb
        )


@bot.callback_query_handler(func=lambda callback: "delete_message" in callback.data)
def delete_message(callback: CallbackQuery):
    message_id = callback.data.split()[-1]
    bot.delete_message(chat_id=callback.message.chat.id, message_id=message_id)


@bot.message_handler(func=lambda message: "modification status" in message.text)
def modification_status(message: Message):
    chat_id = message.chat.id

    new_status = message.text.split()[-1]

    if new_status == Status.application:
        func.client.update_status(user_id=chat_id, status_id=4)
    elif new_status == Status.courier:
        func.client.update_status(user_id=chat_id, status_id=3)
    elif new_status == Status.dispatcher:
        func.client.update_status(user_id=chat_id, status_id=2)
    elif new_status == Status.director:
        func.client.update_status(user_id=chat_id, status_id=1)

    else:
        bot.delete_message(chat_id, message_id=message.id)
        msg = bot.send_message(chat_id, text="–¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç!")
        sleep(3)
        bot.delete_message(chat_id, message_id=msg.id)
        return

    start(message=message)


@bot.message_handler(func=lambda message: message.text == "add status")
def echo(message: Message):
    bot.delete_message(message.chat.id, message.id)
    func.client.add_status()


@bot.message_handler(content_types=["text"])
def echo(message: Message):
    bot.delete_message(message.chat.id, message.id)
    msg = bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!üßê\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É */start*üõ†")
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=msg.id, reply_markup=kb.delete_messege_kb(msg.id))


bot.infinity_polling(skip_pending=True)
