from telebot.types import (KeyboardButton, ReplyKeyboardMarkup, 
                           ReplyKeyboardRemove, InlineKeyboardButton, 
                           InlineKeyboardMarkup)
import functions as func

remove_kb = ReplyKeyboardRemove()

get_phone = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–ºüì±", request_contact=True)
)

def create_money_kb(depth: int) -> ReplyKeyboardMarkup:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–∏–¥–µ –¥–µ–Ω–µ–≥.
    """

    money_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)

    a, b, c, d = 50, 100, 150, 200
    for i in range(depth + 1):
        money_kb.add(
            KeyboardButton(text=f"{a}üíµ"), 
            KeyboardButton(text=f"{b}üíµ"), 
            KeyboardButton(text=f"{c}üíµ"), 
            KeyboardButton(text=f"{d}üíµ")
        )
        a += 200
        b += 200
        c += 200
        d += 200

    return money_kb


yes_no_reply_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton(text="–î–∞‚úÖ"), KeyboardButton(text="–ù–µ—Ç‚ùå")
)


def create_kb_cash() -> InlineKeyboardMarkup:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    –ù—É–∂–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.
    """
    
    kb_cash = InlineKeyboardMarkup()

    for surname, name, patronymic, user_id in map(lambda x: (x[2], x[1], x[3], x[0]), func.client.get_all_info_cash()):
        kb_cash.add(
            InlineKeyboardButton(
                text=f"{surname} {name} {patronymic}", 
                callback_data=f"cash_select&{str(user_id)}"
            )
        )
    kb_cash.add(InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"))
    
    return kb_cash


def create_kb_delete_user() -> InlineKeyboardMarkup:

    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
    –ù—É–∂–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    """
    
    kb_cash = InlineKeyboardMarkup()

    for surname, name, patronymic, user_id in map(lambda x: (x[2], x[1], x[3], x[0]), func.client.get_all_info_cash()):
        kb_cash.add(
            InlineKeyboardButton(
                text=f"{surname} {name} {patronymic}", 
                callback_data=f"delete_user_find {str(user_id)}"
            )
        )
    kb_cash.add(InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main"))
    
    return kb_cash


back_kb = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


incognito_start = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—ÉüòÄ", callback_data="apply"),
            InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—èüö´", callback_data="no_start")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–πüîù", switch_inline_query='–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ "–ú–∏—Ö–∞–ª—ã—á"')
        ]
    ]
)


application_start = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–πüîù", switch_inline_query='–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ "–ú–∏—Ö–∞–ª—ã—á"')
        ]
    ]
)


courier_start = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüìñ", callback_data="documentation")
        ],
        [
            InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ãüìà", callback_data="show_orders"),
            InlineKeyboardButton(text="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Çüí∞", callback_data="virtual_counts")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–πüîù", switch_inline_query='–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ "–ú–∏—Ö–∞–ª—ã—á"')
        ]
    ]
)


dispatcher_start = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–î–∞–Ω–Ω—ã–µüìë", callback_data="personal_data")
        ],
        [
            InlineKeyboardButton(text="–†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏üìà", callback_data="work_with_orders_admin"),
            InlineKeyboardButton(text="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞üí∞", callback_data="virtual_counts_admin")
        ],
        [
            InlineKeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüìñ", callback_data="documentation")
        ],
        [
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–πüîù", switch_inline_query='–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏ "–ú–∏—Ö–∞–ª—ã—á"')
        ]
    ]
)


virtual_cash_admin_select = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Çüí∞", callback_data="virtual_counts")
        ],
        [
            InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—á–µ—Ç–∞üìà", callback_data="look_cash"),
            InlineKeyboardButton(text="–ó–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏üíµ", callback_data="replenish_cash")
        ],
        [
            InlineKeyboardButton(text="üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


personal_data_select_kb = InlineKeyboardMarkup(
    keyboard= [
        [
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà", callback_data="statistics")
        ],
        [
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ‚¨ÜÔ∏è", callback_data="loading"),
            InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ‚¨áÔ∏è", callback_data="download")
        ],
        [
            InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


personal_data_loading_kb = InlineKeyboardMarkup(
    keyboard= [
        [
            InlineKeyboardButton("–ó–∞–∫–∞–∑—ãüìà", callback_data="loading_orders"),
            InlineKeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µüë§", callback_data="loading_persons_data")
        ],
        [
            InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


personal_data_dowload_kb = InlineKeyboardMarkup(
    keyboard= [
        [
            InlineKeyboardButton("–ó–∞–∫–∞–∑—ãüìà", callback_data="dowload_orders"),
            InlineKeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µüë§", callback_data="download_persons_data")
        ],
        [
            InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


work_orders_admin = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—åüõ†", callback_data="creating_orders"),
            InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—åüîç", callback_data="show_orders"),
        ],
        [
            InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


def create_order_kb_admin() -> tuple[InlineKeyboardMarkup, int]:
    
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–∏–¥–µ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ InlineKeyboardMarkup –∏ –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏.
    """
    
    order_kb = InlineKeyboardMarkup()

    order_kb.add(
        InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å‚öôÔ∏è", callback_data="show_orders")
    )

    order_2 = 0
    count_order = 0
    for order, order_user in enumerate(sorted(func.get_info_orders(), key=lambda x: x[-1], reverse=True)):
            count_order += 1
            order_kb.add(
                InlineKeyboardButton(
                    text=f"{order+1+order_2}) {order_user[2]}üìÇ  {order_user[-1]}/{order_user[-6]}üë§", 
                    callback_data=f"order_id {order_user[1]}"
                )
            )

    order_kb.add(
        InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    )
    return order_kb, count_order


def create_order_kb_load_man() -> tuple[InlineKeyboardMarkup, int]:
    
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–∏–¥–µ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ InlineKeyboardMarkup –∏ –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏.
    """
    
    order_kb = InlineKeyboardMarkup()

    order_kb.add(
        InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å‚öôÔ∏è", callback_data="show_orders")
    )

    order_2 = 0
    count_order = 0
    for order, order_user in enumerate(sorted(func.get_info_orders(), key=lambda x: x[-1], reverse=True)):
        if order_user[-1] < order_user[-6] and order_user[-2] == "–ù–µ–ø—Ä–∏–Ω—è—Ç":
            count_order += 1
            order_kb.add(
                InlineKeyboardButton(
                    text=f"{order+1+order_2}) {order_user[2]}üìÇ  {order_user[-1]}/{order_user[-6]}üë§", 
                    callback_data=f"order_id {order_user[1]}"
                )
            )
        else:
            order_2 -= 1

    order_kb.add(
        InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
    )
    return order_kb, count_order


def order_yes_no_kb(order_id: int) -> InlineKeyboardMarkup:
    order_yes_no_kb = InlineKeyboardMarkup(
        keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüìñ", callback_data="documentation")
            ],
            [
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑‚úÖ", callback_data=f"accept_order {str(order_id)}"),
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–ºüëÅ", callback_data="show_orders")
            ],
            [
                InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
            ]
        ]
    )

    return order_yes_no_kb


def order_yes_no_admin_kb(order_id: int):
    order_yes_no_admin_kb = InlineKeyboardMarkup(
        keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüìñ", callback_data="documentation")
            ],
            [
                InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ãüîç", callback_data="show_orders"),
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑‚ùå", callback_data=f"delete_orders {order_id}")
            ],
            [
                InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
            ]
        ]
    )

    return order_yes_no_admin_kb


def order_end(order_id: int) -> InlineKeyboardMarkup:
    order_end = InlineKeyboardMarkup(
        keyboard=[
            [
                InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑‚úÖ", callback_data=f"order_end {order_id}")
            ],
            [
                InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
            ]
        ]
    )

    return order_end


order_no_money = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑(—ã)üîç", callback_data="show_orders"),
            InlineKeyboardButton(text="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—á—ë—Çüí∞", callback_data="virtual_counts")
        ],
        [
            InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)


update_status = InlineKeyboardMarkup(
    keyboard=[
        [
            InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ‚¨áÔ∏è", callback_data="download")
        ],
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Åüõ†", callback_data="update_status"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èü´°", callback_data="delete_user")
        ],
        [
            InlineKeyboardButton("üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_main")
        ]
    ]
)
